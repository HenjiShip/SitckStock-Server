PORT = (its a port)
CONNECTION_URL = grab this from atlas mongodb connect
JWT_SECRET = you'll have to remember this one

# Server side .env
# One of the issues with security was that i was sending the sub recieved from the auth token step, back to the front end. To prevent the sensitive sub id from being sent to the front end, I applied the sub to userId and set the select:false so that it wouldn't show up in any queries. I can still find the related data using the userId but i just can't get the data it contains. So I added "creator" which is a separate id for identifying users thats just used to find posts and non sensitive user related data

# ran into another issue where liked playlist kept the postId even after it was deleted, it was suggested to use change stream to most efficiently remove the postid from all playlists when it was deleted. theres commented code in the delete function to see what it looked like before using change streams

# populate() fills the field with all the information of the referenced schema if the field has a matching _id. So if this creator has an objectId in it, it will look for any userInfo with the matching _id and put all it's info into creator
# const postSchema = mongoose.Schema({
#   title: String,
#   message: String,
#   name: String,
#   userId: { type: String, select: false },
#   tags: [String],
#   selectedFile: String,
#   likes: {
#     type: [String],
#     default: [],
#   },
#   createdAt: {
#     type: Date,
#     default: new Date(),
#   },
#   creator: { type: Schema.Types.ObjectId, ref: "userInfo" },
# });

# #######################################################

# in summary, i should use 
# API.interceptors.request.use((req) => {
#   if (localStorage.getItem("profile")) {
#     req.headers.Authorization = `Bearer ${
#       JSON.parse(localStorage.getItem("profile")).token
#     }`;
#   }
#   return req;
# });
# and only decode the token in the back end since im using the sub for authorization
# I can set a new Schema with userId to sub and set "select:false". this ensures it never sees the front end and still allows me to check if it matches with the user's current id with the middleware 

#i should make sure to set up populate references early and use change streams for more stuff

# i was freaking out over the possibility of having to call populate() on like 10000000 posts but i can limit the amount populate() runs with pagination. I can also rate limit api calls from an ip